// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.zcu.fav.kiv.pia.slezacek.model;

import java.lang.Boolean;
import javax.persistence.EntityManager;
import javax.persistence.TypedQuery;
import org.zcu.fav.kiv.pia.slezacek.model.UserVehicleRights;
import org.zcu.fav.kiv.pia.slezacek.model.Users;
import org.zcu.fav.kiv.pia.slezacek.model.Vehicle;

privileged aspect UserVehicleRights_Roo_Finder {
    
    public static TypedQuery<UserVehicleRights> UserVehicleRights.findUserVehicleRightsesByPersonAndVehicleAndCanDrive(Users person, Vehicle vehicle, Boolean canDrive) {
        if (person == null) throw new IllegalArgumentException("The person argument is required");
        if (vehicle == null) throw new IllegalArgumentException("The vehicle argument is required");
        if (canDrive == null) throw new IllegalArgumentException("The canDrive argument is required");
        EntityManager em = UserVehicleRights.entityManager();
        TypedQuery<UserVehicleRights> q = em.createQuery("SELECT UserVehicleRights FROM UserVehicleRights AS uservehiclerights WHERE uservehiclerights.person = :person AND uservehiclerights.vehicle = :vehicle AND uservehiclerights.canDrive = :canDrive", UserVehicleRights.class);
        q.setParameter("person", person);
        q.setParameter("vehicle", vehicle);
        q.setParameter("canDrive", canDrive);
        return q;
    }
    
    public static TypedQuery<UserVehicleRights> UserVehicleRights.findUserVehicleRightsesByPersonAndVehicleAndCanTank(Users person, Vehicle vehicle, Boolean canTank) {
        if (person == null) throw new IllegalArgumentException("The person argument is required");
        if (vehicle == null) throw new IllegalArgumentException("The vehicle argument is required");
        if (canTank == null) throw new IllegalArgumentException("The canTank argument is required");
        EntityManager em = UserVehicleRights.entityManager();
        TypedQuery<UserVehicleRights> q = em.createQuery("SELECT UserVehicleRights FROM UserVehicleRights AS uservehiclerights WHERE uservehiclerights.person = :person AND uservehiclerights.vehicle = :vehicle AND uservehiclerights.canTank = :canTank", UserVehicleRights.class);
        q.setParameter("person", person);
        q.setParameter("vehicle", vehicle);
        q.setParameter("canTank", canTank);
        return q;
    }
    
    public static TypedQuery<UserVehicleRights> UserVehicleRights.findUserVehicleRightsesByPersonAndVehicleAndCanRepair(Users person, Vehicle vehicle, Boolean canRepair) {
        if (person == null) throw new IllegalArgumentException("The person argument is required");
        if (vehicle == null) throw new IllegalArgumentException("The vehicle argument is required");
        if (canRepair == null) throw new IllegalArgumentException("The canRepair argument is required");
        EntityManager em = UserVehicleRights.entityManager();
        TypedQuery<UserVehicleRights> q = em.createQuery("SELECT UserVehicleRights FROM UserVehicleRights AS uservehiclerights WHERE uservehiclerights.person = :person AND uservehiclerights.vehicle = :vehicle AND uservehiclerights.canRepair = :canRepair", UserVehicleRights.class);
        q.setParameter("person", person);
        q.setParameter("vehicle", vehicle);
        q.setParameter("canRepair", canRepair);
        return q;
    }
    
}
