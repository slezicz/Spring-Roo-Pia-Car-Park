// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.zcu.fav.kiv.pia.slezacek.controller;

import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Long;
import java.lang.String;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.zcu.fav.kiv.pia.slezacek.model.UserVehicleRights;
import org.zcu.fav.kiv.pia.slezacek.model.Users;
import org.zcu.fav.kiv.pia.slezacek.model.Vehicle;

privileged aspect UserVehicleRightsController_Roo_Controller {
    
    @RequestMapping(params = "form", method = RequestMethod.GET)
    public String UserVehicleRightsController.createForm(Model model) {
        model.addAttribute("userVehicleRights", new UserVehicleRights());
        List dependencies = new ArrayList();
        if (Users.countUserses() == 0) {
            dependencies.add(new String[]{"person", "userses"});
        }
        model.addAttribute("dependencies", dependencies);
        return "uservehiclerights/create";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    public String UserVehicleRightsController.show(@PathVariable("id") Long id, Model model) {
        model.addAttribute("uservehiclerights", UserVehicleRights.findUserVehicleRights(id));
        model.addAttribute("itemId", id);
        return "uservehiclerights/show";
    }
    
    @RequestMapping(method = RequestMethod.GET)
    public String UserVehicleRightsController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model model) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            model.addAttribute("uservehiclerightses", UserVehicleRights.findUserVehicleRightsEntries(page == null ? 0 : (page.intValue() - 1) * sizeNo, sizeNo));
            float nrOfPages = (float) UserVehicleRights.countUserVehicleRightses() / sizeNo;
            model.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            model.addAttribute("uservehiclerightses", UserVehicleRights.findAllUserVehicleRightses());
        }
        return "uservehiclerights/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT)
    public String UserVehicleRightsController.update(@Valid UserVehicleRights userVehicleRights, BindingResult result, Model model, HttpServletRequest request) {
        if (result.hasErrors()) {
            model.addAttribute("userVehicleRights", userVehicleRights);
            return "uservehiclerights/update";
        }
        userVehicleRights.merge();
        return "redirect:/uservehiclerights/" + encodeUrlPathSegment(userVehicleRights.getId().toString(), request);
    }
    
    @RequestMapping(value = "/{id}", params = "form", method = RequestMethod.GET)
    public String UserVehicleRightsController.updateForm(@PathVariable("id") Long id, Model model) {
        model.addAttribute("userVehicleRights", UserVehicleRights.findUserVehicleRights(id));
        return "uservehiclerights/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    public String UserVehicleRightsController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model model) {
        UserVehicleRights.findUserVehicleRights(id).remove();
        model.addAttribute("page", (page == null) ? "1" : page.toString());
        model.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/uservehiclerights?page=" + ((page == null) ? "1" : page.toString()) + "&size=" + ((size == null) ? "10" : size.toString());
    }
    
    @RequestMapping(params = { "find=ByPersonAndVehicleAndCanDrive", "form" }, method = RequestMethod.GET)
    public String UserVehicleRightsController.findUserVehicleRightsesByPersonAndVehicleAndCanDriveForm(Model model) {
        model.addAttribute("userses", Users.findAllUserses());
        model.addAttribute("vehicles", Vehicle.findAllVehicles());
        return "uservehiclerights/findUserVehicleRightsesByPersonAndVehicleAndCanDrive";
    }
    
    @RequestMapping(params = "find=ByPersonAndVehicleAndCanDrive", method = RequestMethod.GET)
    public String UserVehicleRightsController.findUserVehicleRightsesByPersonAndVehicleAndCanDrive(@RequestParam("person") Users person, @RequestParam("vehicle") Vehicle vehicle, @RequestParam(value = "canDrive", required = false) Boolean canDrive, Model model) {
        model.addAttribute("uservehiclerightses", UserVehicleRights.findUserVehicleRightsesByPersonAndVehicleAndCanDrive(person, vehicle, canDrive == null ? new Boolean(false) : canDrive).getResultList());
        return "uservehiclerights/list";
    }
    
    @RequestMapping(params = { "find=ByPersonAndVehicleAndCanTank", "form" }, method = RequestMethod.GET)
    public String UserVehicleRightsController.findUserVehicleRightsesByPersonAndVehicleAndCanTankForm(Model model) {
        model.addAttribute("userses", Users.findAllUserses());
        model.addAttribute("vehicles", Vehicle.findAllVehicles());
        return "uservehiclerights/findUserVehicleRightsesByPersonAndVehicleAndCanTank";
    }
    
    @RequestMapping(params = "find=ByPersonAndVehicleAndCanTank", method = RequestMethod.GET)
    public String UserVehicleRightsController.findUserVehicleRightsesByPersonAndVehicleAndCanTank(@RequestParam("person") Users person, @RequestParam("vehicle") Vehicle vehicle, @RequestParam(value = "canTank", required = false) Boolean canTank, Model model) {
        model.addAttribute("uservehiclerightses", UserVehicleRights.findUserVehicleRightsesByPersonAndVehicleAndCanTank(person, vehicle, canTank == null ? new Boolean(false) : canTank).getResultList());
        return "uservehiclerights/list";
    }
    
    @RequestMapping(params = { "find=ByPersonAndVehicleAndCanRepair", "form" }, method = RequestMethod.GET)
    public String UserVehicleRightsController.findUserVehicleRightsesByPersonAndVehicleAndCanRepairForm(Model model) {
        model.addAttribute("userses", Users.findAllUserses());
        model.addAttribute("vehicles", Vehicle.findAllVehicles());
        return "uservehiclerights/findUserVehicleRightsesByPersonAndVehicleAndCanRepair";
    }
    
    @RequestMapping(params = "find=ByPersonAndVehicleAndCanRepair", method = RequestMethod.GET)
    public String UserVehicleRightsController.findUserVehicleRightsesByPersonAndVehicleAndCanRepair(@RequestParam("person") Users person, @RequestParam("vehicle") Vehicle vehicle, @RequestParam(value = "canRepair", required = false) Boolean canRepair, Model model) {
        model.addAttribute("uservehiclerightses", UserVehicleRights.findUserVehicleRightsesByPersonAndVehicleAndCanRepair(person, vehicle, canRepair == null ? new Boolean(false) : canRepair).getResultList());
        return "uservehiclerights/list";
    }
    
    @ModelAttribute("userses")
    public Collection<Users> UserVehicleRightsController.populateUserses() {
        return Users.findAllUserses();
    }
    
    @ModelAttribute("vehicles")
    public Collection<Vehicle> UserVehicleRightsController.populateVehicles() {
        return Vehicle.findAllVehicles();
    }
    
}
